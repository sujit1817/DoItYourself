Object oriented programming basics
1.What is a class?
A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. 
It is a logical entity. It can't be physical.

A class in Java can contain:

Fields
Methods
Constructors
Blocks
Nested class and interface

-------------------------------------------------------------------------------------------
2. What is an object?
An entity that has state and behavior is known as an object. An object is an instance of a class.
An object is a real-world entity.
An object is a runtime entity.

-- There are 3 ways to initialize object in Java.

1.By reference variable
2.By method
3.By constructor

-- There are many ways to create an object in java. They are:

1.By new keyword
2.By newInstance() method
3.By clone() method
4.By deserialization
5.By factory method etc.

-------------------------------------------------------------------------------------------
3. What is state of an object?

State is a characteristic of an Object which represnts data(value) of an Object
Pen is an object. Its name is Reynolds; color is white, known as its state. 

-------------------------------------------------------------------------------------------
4 . What is behavior of an object?
Behaviour of an Object represents the functionality such as deposit, withdraw, write etc.
Pen is an object. It is used to write, so writing is its behavior.

-------------------------------------------------------------------------------------------
5 . What is the super class of every class in Java?

Object Class
-------------------------------------------------------------------------------------------
6 . Explain about toString method ?

To represent an Object as a string toString method is used. The toString() method returns the String representation of the object.
By overriding the toString() method of the Object class, we can return values of the object, so we don't need to write much code.
/*
Note- If you print any object, Java compiler internally invokes the toString() method on the object. 
So overriding the toString() method, returns the desired output, it can be the state of an object etc. depending on your implementation.
*/
-------------------------------------------------------------------------------------------
7. What is the use of equals method in Java?

The Java String class equals() method compares the two given strings based on the content of the string. 
If any character is not matched, it returns false. If all characters are matched, it returns true.
The String equals() method overrides the equals() method of the Object class.
-------------------------------------------------------------------------------------------
8. What are the important things to consider when implementing equals method?

-------------------------------------------------------------------------------------------
9. What is the Hashcode method used for in Java?

The Java hashCode() Method
->  hashCode()
hashCode in Java is a function that returns the hashcode value of an object on calling. It returns an integer or 
a 4 bytes value which is generated by the hashing algorithm.
-------------------------------------------------------------------------------------------
10. Explain inheritance with examples .

Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.
It is an important part of OOPs (Object Oriented programming system). Inheritance represents the IS-A relationship which is also known as a parent-child relationship.

tata nexon is a car. where car is parent and nexon is child class.
dog, lion and elephant are animals. where animal is parent and lion and dog are childs.

 ex. Car can inherit from Vehicle, Orange can inherit from Fruit
-------------------------------------------------------------------------------------------
11. What is method overloading?

If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.

-------------------------------------------------------------------------------------------
class MethodOverloadingbyNoOfArguments{
	public static void main(String[] args){
		Adder adder=new Adder();
		System.out.println(adder.add(10,20));
		System.out.println(adder.add(10,20,30));
	}
	
}
class Adder{
	public int add(int a,int b){
		return a+b;
		}
	public int add(int a,int b,int c){
		return a+b+c;
	}
}
-------------------------------------------------------------------------------------------
//we are creating static methods so that we don't need to create instance for calling methods.
class MethodOverloadingbyNoOfArguments{
	public static void main(String[] args){
		System.out.println(Adder.add(10,20));
		System.out.println(Adder.add(10,20,30));
	}
	
}
class Adder{
	static int add(int a,int b){
		return a+b;
		}
	static int add(int a,int b,int c){
		return a+b+c;
	}
}

-------------------------------------------------------------------------------------------
12. What is method overriding?
If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java.

--Usage of Java Method Overriding
1.Method overriding is used to provide the specific implementation of a method which is already provided by its superclass.
2.Method overriding is used for runtime polymorphism

--Rules for Java Method Overriding
1.The method must have the same name as in the parent class
2.The method must have the same parameter as in the parent class.
3.There must be an IS-A relationship (inheritance).
-------------------------------------------------------------------------------------------
13 . Can super class reference variable can hold an object of sub class?

-------------------------------------------------------------------------------------------
14 . Is multiple inheritance allowed in Java?

-------------------------------------------------------------------------------------------
15 . What is an interface?

-------------------------------------------------------------------------------------------
16 . How do you define an interface?

-------------------------------------------------------------------------------------------
17 . How do you implement an interface?

-------------------------------------------------------------------------------------------
18 . Can you explain a few tricky things about interfaces?

-------------------------------------------------------------------------------------------
19 . Can you extend an interface?

-------------------------------------------------------------------------------------------
20 . Can a class extend multiple interfaces?

-------------------------------------------------------------------------------------------
21 . What is an abstract class?
22 . When do you use an abstract class?
23 . How do you define an abstract method?
24 . Compare abstract class vs interface?
25 . What is a constructor?
26 . What is a default constructor?
27 . Will this code compile?
28 . How do you call a super class constructor from a constructor?
29 . Will this code compile?
30 . What is the use of this()?
31 . Can a constructor be called directly from a method?
32 . Is a super class constructor called even when there is no explicit call from a sub class constructor?

Advanced object oriented concepts
33 . What is polymorphism?
34 . What is the use of instanceof operator in Java?
35 . What is coupling?
36 . What is cohesion?
37 . What is encapsulation?
38 . What is an inner class?
39 . What is a static inner class?
40 . Can you create an inner class inside a method?
41 . What is an anonymous class?

Modifiers
42 . What is default class modifier?
43 . What is private access modifier?
44 . What is default or package access modifier?
45 . What is protected access modifier?
46 . What is public access modifier?
47 . What access types of variables can be accessed from a class in same package?
48 . What access types of variables can be accessed from a class in different package?
49 . What access types of variables can be accessed from a sub class in same package?
50 . What access types of variables can be accessed from a sub class in different package?
